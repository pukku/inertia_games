package stalbans.inertiagames;import java.lang.Math;public class Rocket {	private final int NUM_HEADINGS = 8;		// theoretically, we could have more...											// (but if we do, we _really_ need to change this.kick and											// RocketPanel stuff dealing with images....)		private double x;						// where is the rocket?	private double y;		private int heading;					// which way is it facing	private int deltaHeading;				// when we rotate, what is the increment											// this should either be 1 or 2		private double vx;						// how much to add to the x location	private double vy;						// how much to add to the y location	private double deltav;					// what is our actual kick strength		// *********************************************	// Constructors		// simple contructor: at 0,0, heading up, dH of 1, not moving in x or y, kick strength of 5	public Rocket() {		this(0,0,0,1,0,0,5);	}		// this time, the rocket's location is specified, but the rest is defaults	public Rocket(int inx, int iny) {		this(inx, iny, 0,1,0,0,5);	}		// now specifying the initial heading and the heading change as well	public Rocket(int inx, int iny, int inheading, int indeltaHeading) {		this(inx, iny, inheading, indeltaHeading, 0,0,5);	}		// and of course, actually setting everything.	public Rocket(int inx, int iny, int inheading, int indeltaHeading, double invx, double invy, double indv) {		x = (double)inx;		y = (double)iny;		heading = inheading;		deltaHeading = indeltaHeading;		vx = invx;		vy = invy;		deltav = indv;	}	// *********************************************	// accessor functions			public double getx() {		return x;	}		public double gety() {		return y;	}		public int getHeading() {		return heading;	}		public void setHeading(int h) {		heading = h;	}		public int getdeltaHeading() {		return deltaHeading;	}	public void setdeltaHeading(int dh) {		deltaHeading = dh;	}		public double getdeltav() {		return deltav;	}	public void setdeltav(double dv) {		deltav = dv;	}	public double getvx() {		return vx;	}		public double getvy() {		return vy;	}		public double getSpeed() {		return Math.sqrt((vy*vy)+(vx*vx));	}		// *********************************************	// functions for modifying the Rocket's state		// call to give a kick	public void kick() {		// this procedure is dependent on the number of headings allowed.		// it changes the vx and vy.		switch (heading) {			case 0:				vy += deltav;				break;			case 1:				vx += (deltav / Math.sqrt(2));				vy += (deltav / Math.sqrt(2));				break;			case 2:				vx += deltav;				break;			case 3:				vx += (deltav / Math.sqrt(2));				vy -= (deltav / Math.sqrt(2));				break;			case 4:				vy -= deltav;				break;			case 5:				vx -= (deltav / Math.sqrt(2));				vy -= (deltav / Math.sqrt(2));				break;			case 6:				vx -= deltav;				break;			case 7:				vx -= (deltav / Math.sqrt(2));				vy += (deltav / Math.sqrt(2));				break;						default: break;		}		}		// rotate the rocket clockwise	public void rotateR() {		heading += deltaHeading;		heading %= NUM_HEADINGS;	}		// rotate the rocket counter-clockwise	public void rotateL() {		heading -= deltaHeading;		if (heading < 0) { heading += NUM_HEADINGS; }	}		// *********************************************	// time step		public void update() {		x += vx;		y += vy;	}}