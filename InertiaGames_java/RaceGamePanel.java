package stalbans.inertiagames;import java.awt.*;public class RaceGamePanel extends SpeedometerPanel {	private boolean autokick = false;						// is the autokicker engaged?		private final int LINE_LOC = 10;						// position of the finishing line		public RaceGamePanel(RocketPanelCreator r) {		super(r);	}		// toggle autokick from on to off and vice versa	public void toggleAutokick() {		if (autokick)	{ autokick = false; }		else			{ autokick = true; }	}		// accessor function for autokick value	public boolean getAutokick() {		return autokick;	}		// draw a line at y-loc LINE_LOC across the width of the screen	protected void paintGameScreen(Graphics g) {		// uncomment if a subclass of SpeedometerPanel		super.paintGameScreen(g);		g.drawLine(0,LINE_LOC,this.getWidth(),LINE_LOC);	}		// the rocket has crashed if it is outside the x bounds, or below the bottom y bound.	public boolean crashed() {		int theX = (int)Math.round(theRocket.getx());		int theY = (int)Math.round(theRocket.gety());				if ((theX > getWidth()) || (theX < 0))	{ return true; }		if (theY < 0)							{ return true; }				return false;	}		// the player has won if the rocket is above the line	public boolean gameOver() {		int theY = getHeight() - (int)Math.round(theRocket.gety());				if (theY < LINE_LOC)	{ return true; }		else 					{ return false; }	}		// we override this to do the check for autokicking.  Note that the kick button	// should be inactivated whenever autokick is true...	public void doRocketMove() {		if (autokick) { theRocket.kick(); }		super.doRocketMove();	}}